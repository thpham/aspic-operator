# k3d cluster create aspic --config k3d-cluster.yaml
# k3d cluster delete aspic
apiVersion: k3d.io/v1alpha4
kind: Simple
metadata:
  name: aspic
servers: 1
#agents: 2
kubeAPI:
  #host: "myhost.my.domain"
  hostIP: "0.0.0.0"
  hostPort: "6443" # Kubernetes API via localhost:6443
image: rancher/k3s:v1.23.5-k3s1
#network: aspic-net # same as `--network aspic-net`
#subnet: "172.28.0.0/16" # same as `--subnet 172.28.0.0/16`
token: superSecretToken # same as `--token superSecretToken`
volumes:
  - volume: /tmp:/tmp/somepath
    nodeFilters:
      - server:0
      #- agent:*
ports:
  - port: 80:80  # http via localhost:80
    nodeFilters:
      - loadbalancer
  - port: 0.0.0.0:443:443 # https via localhost:443
    nodeFilters:
      - loadbalancer
env:
  - envVar: bar=baz,bob
    nodeFilters:
      - server:0
#registries: # define how registries should be created or used
  #create: # creates a default registry to be used with the cluster; same as `--registry-create registry.localhost`
  #  name: registry.localhost
  #  host: "0.0.0.0"
  #  hostPort: "5000"
  #use: [] # some other k3d-managed registry; same as `--registry-use 'k3d-myotherregistry:5000'`
  #config: | # define contents of the `registries.yaml` file (or reference a file); same as `--registry-config /path/to/config.yaml`
  #  mirrors:
  #    "my.company.registry":
  #      endpoint:
  #        - http://my.company.registry:5000
  #  configs:
  #    "ghcr.io":
  #      auth:
  #        username: <github_username>
  #        password: <https://bit.ly/3wepOgD>
#hostAliases: # /etc/hosts style entries to be injected into /etc/hosts in the node containers and in the NodeHosts section in CoreDNS
#  - ip: 1.2.3.4
#    hostnames: 
#      - my.host.local
#      - that.other.local
#  - ip: 1.1.1.1
#    hostnames:
#      - cloud.flare.dns
options:
  k3d:
    wait: true # wait for cluster to be usable before returining; same as `--wait` (default: true)
    timeout: "60s" # wait timeout before aborting; same as `--timeout 60s`
    disableLoadbalancer: false # same as `--no-lb`
    disableImageVolume: false # same as `--no-image-volume`
    disableRollback: false # same as `--no-Rollback`
    loadbalancer:
      configOverrides:
        - settings.workerConnections=2048
  k3s: # options passed on to K3s itself
    extraArgs: # additional arguments passed to the `k3s server|agent` command; same as `--k3s-arg`
      - arg: --tls-san=my.host.domain
        nodeFilters:
          - server:*
    #nodeLabels:
    #  - label: foo=bar # same as `--k3s-node-label 'foo=bar@agent:1'` -> this results in a Kubernetes node label
    #    nodeFilters:
    #      - agent:1
  kubeconfig:
    updateDefaultKubeconfig: true # add new cluster to your default Kubeconfig; same as `--kubeconfig-update-default` (default: true)
    switchCurrentContext: true # also set current-context to the new cluster's context; same as `--kubeconfig-switch-context` (default: true)
  #runtime: # runtime (docker) specific options
  #  gpuRequest: all # same as `--gpus all`
  #  labels:
  #    - label: bar=baz # same as `--runtime-label 'bar=baz@agent:1'` -> this results in a runtime (docker) container label
  #      nodeFilters:
  #        - agent:1
